{"version":3,"sources":["components/TimeItem/TimeItem.tsx","components/TimeChart/TimeChart.tsx","App.tsx","index.tsx"],"names":["TimeItem","props","name","left","fill","value","className","style","width","TimeChart","useState","timeSpent","times","setTimes","wholeTime","reduce","a","b","time","elementsWidth","useMemo","map","Math","round","offsetLeft","useCallback","index","slice","handleRandomClick","prevState","oldTime","random","toFixed","useEffect","interval","setInterval","clearInterval","type","onClick","App","Root","StrictMode","createRoot","document","getElementById","render"],"mappings":"wSASaA,EAA4B,SAACC,GACxC,IACEC,EAIED,EAJFC,KACAC,EAGEF,EAHFE,KACAC,EAEEH,EAFFG,KACAC,EACEJ,EADFI,MAGF,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,aAAf,SACGJ,IAEH,qBAAKI,UAAU,aAAf,SACE,qBACEA,UAAU,kBACVC,MAAO,CACLJ,KAAK,GAAD,OAAKA,EAAL,MACJK,MAAM,GAAD,OAAKJ,EAAL,OAJT,SAOE,qBAAKE,UAAU,mBAAf,SACGD,YCnBAI,EAAsB,WACjC,MAA0BC,mBAAsBC,GAAhD,mBAAOC,EAAP,KAAcC,EAAd,KAKMC,EAAYF,EAAMG,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAEC,OAAM,GAE/CC,EAAgBC,mBAAS,WAC7B,OAAOR,EAAMS,KAAI,SAAAH,GAAI,OAAII,KAAKC,MANd,IAMqBL,EAAKA,KAAoBJ,QAC5D,CAACF,EAAOE,EAPM,MASZU,EAAaC,uBAAY,SAACC,GAC9B,OAAc,IAAVA,EACK,EAGFP,EAAcQ,MAAM,EAAGD,GAAOX,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,OACzD,CAACE,IAEES,EAAoB,WACxBf,GAAS,SAAAgB,GAAS,OAAIA,EAAUR,KAAI,SAAAS,GAClC,OAAO,2BAAKA,GAAZ,IAAqBZ,OAAwB,GAAhBI,KAAKS,UAAeC,QAAQ,YAgB7D,OAZAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BP,MAxBkB,OA2BpB,OAAO,WACDM,GACFE,cAAcF,OAMlB,sBAAK5B,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,kCAIA,qBAAKA,UAAU,cAAf,SACGM,EAAMS,KAAI,SAACH,EAAMQ,GAAP,OACT,cAAC,EAAD,CACExB,KAAMgB,EAAKhB,KACXC,KAAMqB,EAAWE,GACjBtB,KAAMe,EAAcO,GACpBrB,MAAOO,EAAMc,GAAOR,MACfA,EAAKhB,KAAOgB,EAAKA,WAK5B,wBACEmB,KAAK,SACL/B,UAAU,eACVgC,QAASV,EAHX,wBChEOW,EAAgB,WAC3B,OACE,qBAAKjC,UAAU,MAAf,SACE,cAAC,EAAD,OCFAkC,EAAO,kBACX,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,OAIJC,qBAAWC,SAASC,eAAe,SAChCC,OAAO,cAAC,EAAD,M","file":"static/js/main.359d190f.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  name: string,\n  left: number,\n  fill: number,\n  value: number,\n};\n\nexport const TimeItem: React.FC<Props> = (props) => {\n  const {\n    name,\n    left,\n    fill,\n    value,\n  } = props;\n\n  return (\n    <div className=\"time__item\">\n      <div className=\"time__name\">\n        {name}\n      </div>\n      <div className=\"time__data\">\n        <div\n          className=\"time__data-fill\"\n          style={{\n            left: `${left}px`,\n            width: `${fill}px`,\n          }}\n        >\n          <div className=\"time__data-value\">\n            {value}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import './TimeChart.scss';\nimport React,\n{\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport timeSpent from '../../api/time.json';\nimport { spentTime } from '../../types/spentTime';\nimport { TimeItem } from '../TimeItem/TimeItem';\n\nexport const TimeChart: React.FC = () => {\n  const [times, setTimes] = useState<spentTime[]>(timeSpent);\n\n  const areaWidth = 400;\n  const autoTimeClick = 31800;\n\n  const wholeTime = times.reduce((a, b) => a + b.time, 0);\n\n  const elementsWidth = useMemo((() => {\n    return times.map(time => Math.round((time.time * areaWidth) / wholeTime));\n  }), [times, wholeTime, areaWidth]);\n\n  const offsetLeft = useCallback((index: number) => {\n    if (index === 0) {\n      return 0;\n    }\n\n    return elementsWidth.slice(0, index).reduce((a, b) => a + b);\n  }, [elementsWidth]);\n\n  const handleRandomClick = () => {\n    setTimes(prevState => prevState.map(oldTime => {\n      return { ...oldTime, time: +(Math.random() * 10).toFixed(2) };\n    }));\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      handleRandomClick();\n    }, autoTimeClick);\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  });\n\n  return (\n    <div className=\"time\">\n      <h2 className=\"time__title\">\n        spent time (seconds)\n      </h2>\n\n      <div className=\"time__chart\">\n        {times.map((time, index) => (\n          <TimeItem\n            name={time.name}\n            left={offsetLeft(index)}\n            fill={elementsWidth[index]}\n            value={times[index].time}\n            key={time.name + time.time}\n          />\n        ))}\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"time__button\"\n        onClick={handleRandomClick}\n      >\n        RANDOM\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { TimeChart } from './components/TimeChart/TimeChart';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <TimeChart />\n    </div>\n  );\n};\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.scss';\nimport { App } from './App';\n\nconst Root = () => (\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}